{"ast":null,"code":"import { InjectionToken, forwardRef, Directive, Optional, Inject, ElementRef, KeyValueDiffers, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as Éµngcc0 from '@angular/core';\nvar CurrencyMaskInputMode;\n\n(function (CurrencyMaskInputMode) {\n  CurrencyMaskInputMode[CurrencyMaskInputMode[\"FINANCIAL\"] = 0] = \"FINANCIAL\";\n  CurrencyMaskInputMode[CurrencyMaskInputMode[\"NATURAL\"] = 1] = \"NATURAL\";\n})(CurrencyMaskInputMode || (CurrencyMaskInputMode = {}));\n\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nclass InputManager {\n  constructor(htmlInputElement) {\n    this.htmlInputElement = htmlInputElement;\n  }\n\n  setCursorAt(position) {\n    if (this.htmlInputElement.setSelectionRange) {\n      this.htmlInputElement.focus();\n      this.htmlInputElement.setSelectionRange(position, position);\n    } else if (this.htmlInputElement.createTextRange) {\n      let textRange = this.htmlInputElement.createTextRange();\n      textRange.collapse(true);\n      textRange.moveEnd(\"character\", position);\n      textRange.moveStart(\"character\", position);\n      textRange.select();\n    }\n  }\n\n  updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n    this.rawValue = newRawValue;\n    let newLength = newRawValue.length;\n    selectionStart = selectionStart - (oldLength - newLength);\n    this.setCursorAt(selectionStart);\n  }\n\n  get canInputMoreNumbers() {\n    let onlyNumbers = this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, \"\");\n    let haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let haveNumberSelected = !!(selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\n    let startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n    return haventReachedMaxLength || haveNumberSelected || startWithZero;\n  }\n\n  get inputSelection() {\n    let selectionStart = 0;\n    let selectionEnd = 0;\n\n    if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n      selectionStart = this.htmlInputElement.selectionStart;\n      selectionEnd = this.htmlInputElement.selectionEnd;\n    } else {\n      let range = document.selection.createRange();\n\n      if (range && range.parentElement() == this.htmlInputElement) {\n        let lenght = this.htmlInputElement.value.length;\n        let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n        let startRange = this.htmlInputElement.createTextRange();\n        startRange.moveToBookmark(range.getBookmark());\n        let endRange = this.htmlInputElement.createTextRange();\n        endRange.collapse(false);\n\n        if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n          selectionStart = selectionEnd = lenght;\n        } else {\n          selectionStart = -startRange.moveStart(\"character\", -lenght);\n          selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n\n          if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n            selectionEnd = lenght;\n          } else {\n            selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n            selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n          }\n        }\n      }\n    }\n\n    return {\n      selectionStart: selectionStart,\n      selectionEnd: selectionEnd\n    };\n  }\n\n  get rawValue() {\n    return this.htmlInputElement && this.htmlInputElement.value;\n  }\n\n  set rawValue(value) {\n    this._storedRawValue = value;\n\n    if (this.htmlInputElement) {\n      this.htmlInputElement.value = value;\n    }\n  }\n\n  get storedRawValue() {\n    return this._storedRawValue || '';\n  }\n\n}\n\nclass InputService {\n  constructor(htmlInputElement, options) {\n    this.htmlInputElement = htmlInputElement;\n    this.options = options;\n    this.SINGLE_DIGIT_REGEX = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\n    this.ONLY_NUMBERS_REGEX = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\n    this.PER_AR_NUMBER = new Map();\n    this.inputManager = new InputManager(htmlInputElement);\n    this.initialize();\n  }\n\n  initialize() {\n    this.PER_AR_NUMBER.set(\"\\u06F0\", \"0\");\n    this.PER_AR_NUMBER.set(\"\\u06F1\", \"1\");\n    this.PER_AR_NUMBER.set(\"\\u06F2\", \"2\");\n    this.PER_AR_NUMBER.set(\"\\u06F3\", \"3\");\n    this.PER_AR_NUMBER.set(\"\\u06F4\", \"4\");\n    this.PER_AR_NUMBER.set(\"\\u06F5\", \"5\");\n    this.PER_AR_NUMBER.set(\"\\u06F6\", \"6\");\n    this.PER_AR_NUMBER.set(\"\\u06F7\", \"7\");\n    this.PER_AR_NUMBER.set(\"\\u06F8\", \"8\");\n    this.PER_AR_NUMBER.set(\"\\u06F9\", \"9\");\n    this.PER_AR_NUMBER.set(\"\\u0660\", \"0\");\n    this.PER_AR_NUMBER.set(\"\\u0661\", \"1\");\n    this.PER_AR_NUMBER.set(\"\\u0662\", \"2\");\n    this.PER_AR_NUMBER.set(\"\\u0663\", \"3\");\n    this.PER_AR_NUMBER.set(\"\\u0664\", \"4\");\n    this.PER_AR_NUMBER.set(\"\\u0665\", \"5\");\n    this.PER_AR_NUMBER.set(\"\\u0666\", \"6\");\n    this.PER_AR_NUMBER.set(\"\\u0667\", \"7\");\n    this.PER_AR_NUMBER.set(\"\\u0668\", \"8\");\n    this.PER_AR_NUMBER.set(\"\\u0669\", \"9\");\n  }\n\n  addNumber(keyCode) {\n    const {\n      decimal,\n      precision,\n      inputMode\n    } = this.options;\n    let keyChar = String.fromCharCode(keyCode);\n    const isDecimalChar = keyChar === this.options.decimal;\n\n    if (!this.rawValue) {\n      this.rawValue = this.applyMask(false, keyChar);\n      let selectionStart = undefined;\n\n      if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {\n        selectionStart = this.rawValue.indexOf(decimal);\n\n        if (isDecimalChar) {\n          selectionStart++;\n        }\n      }\n\n      this.updateFieldValue(selectionStart);\n    } else {\n      let selectionStart = this.inputSelection.selectionStart;\n      let selectionEnd = this.inputSelection.selectionEnd;\n      const rawValueStart = this.rawValue.substring(0, selectionStart);\n      let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length); // In natural mode, replace decimals instead of shifting them.\n\n      const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n\n      if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && selectionStart === selectionEnd) {\n        rawValueEnd = rawValueEnd.substring(1);\n      }\n\n      const newValue = rawValueStart + keyChar + rawValueEnd;\n      let nextSelectionStart = selectionStart + 1;\n      const isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;\n\n      if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n        // If the cursor is just before the decimal or thousands separator and the user types the\n        // decimal or thousands separator, move the cursor past it.\n        nextSelectionStart++;\n      } else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {\n        // Ignore other non-numbers.\n        return;\n      }\n\n      this.rawValue = newValue;\n      this.updateFieldValue(nextSelectionStart);\n    }\n  }\n\n  applyMask(isNumber, rawValue, disablePadAndTrim = false) {\n    let {\n      allowNegative,\n      decimal,\n      precision,\n      prefix,\n      suffix,\n      thousands,\n      min,\n      max,\n      inputMode\n    } = this.options;\n    rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n    let onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n\n    if (!onlyNumbers && rawValue !== decimal) {\n      return \"\";\n    }\n\n    if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {\n      rawValue = this.padOrTrimPrecision(rawValue);\n      onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n    }\n\n    let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^\\u0660*/g, \"\").replace(/^\\u06F0*/g, \"\").replace(/^0*/g, \"\");\n\n    if (integerPart == \"\") {\n      integerPart = \"0\";\n    }\n\n    let integerValue = parseInt(integerPart);\n    integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\n\n    if (thousands && integerPart.startsWith(thousands)) {\n      integerPart = integerPart.substring(1);\n    }\n\n    let newRawValue = integerPart;\n    let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n    let decimalValue = parseInt(decimalPart) || 0;\n    let isNegative = rawValue.indexOf(\"-\") > -1; // Ensure max is at least as large as min.\n\n    max = this.isNullOrUndefined(max) || this.isNullOrUndefined(min) ? max : Math.max(max, min); // Ensure precision number works well with more than 2 digits\n    // 23 / 100... 233 / 1000 and so on\n\n    const divideBy = Number('1'.padEnd(precision + 1, '0')); // Restrict to the min and max values.\n\n    let newValue = integerValue + decimalValue / divideBy;\n    newValue = isNegative ? -newValue : newValue;\n\n    if (!this.isNullOrUndefined(max) && newValue > max) {\n      return this.applyMask(true, max + '');\n    } else if (!this.isNullOrUndefined(min) && newValue < min) {\n      return this.applyMask(true, min + '');\n    }\n\n    if (precision > 0) {\n      if (newRawValue == \"0\" && decimalPart.length < precision) {\n        newRawValue += decimal + \"0\".repeat(precision - 1) + decimalPart;\n      } else {\n        newRawValue += decimal + decimalPart;\n      }\n    } // let isZero = newValue == 0;\n\n\n    let operator = isNegative && allowNegative\n    /*&& !isZero */\n    ? \"-\" : \"\";\n    return operator + prefix + newRawValue + suffix;\n  }\n\n  padOrTrimPrecision(rawValue) {\n    let {\n      decimal,\n      precision\n    } = this.options;\n    let decimalIndex = rawValue.lastIndexOf(decimal);\n\n    if (decimalIndex === -1) {\n      decimalIndex = rawValue.length;\n      rawValue += decimal;\n    }\n\n    let decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, \"\");\n    const actualPrecision = decimalPortion.length;\n\n    if (actualPrecision < precision) {\n      for (let i = actualPrecision; i < precision; i++) {\n        decimalPortion += '0';\n      }\n    } else if (actualPrecision > precision) {\n      decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\n    }\n\n    return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n  }\n\n  clearMask(rawValue) {\n    if (this.isNullable() && rawValue === \"\") return null;\n    let value = (rawValue || \"0\").replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n\n    if (this.options.thousands) {\n      value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n    }\n\n    if (this.options.decimal) {\n      value = value.replace(this.options.decimal, \".\");\n    }\n\n    this.PER_AR_NUMBER.forEach((val, key) => {\n      const re = new RegExp(key, \"g\");\n      value = value.replace(re, val);\n    });\n    return parseFloat(value);\n  }\n\n  changeToNegative() {\n    if (this.options.allowNegative\n    /*&& this.rawValue != \"\"*/\n    && this.rawValue.charAt(0) != \"-\"\n    /*&& this.value != 0*/\n    ) {\n      // Apply the mask to ensure the min and max values are enforced.\n      this.rawValue = this.applyMask(false, \"-\" + (this.rawValue ? this.rawValue : '0'));\n    }\n  }\n\n  changeToPositive() {\n    // Apply the mask to ensure the min and max values are enforced.\n    this.rawValue = this.applyMask(false, this.rawValue.replace(\"-\", \"\"));\n  }\n\n  removeNumber(keyCode) {\n    let {\n      decimal,\n      thousands,\n      prefix,\n      suffix,\n      inputMode\n    } = this.options;\n\n    if (this.isNullable() && this.value == 0) {\n      this.rawValue = null;\n      return;\n    }\n\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let selectionStart = this.inputSelection.selectionStart;\n    const suffixStart = this.rawValue.length - suffix.length;\n    selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n    selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length)); // Check if selection was entirely in the prefix or suffix.\n\n    if (selectionStart === selectionEnd && this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\n      this.updateFieldValue(selectionStart);\n      return;\n    }\n\n    let decimalIndex = this.rawValue.indexOf(decimal);\n\n    if (decimalIndex === -1) {\n      decimalIndex = this.rawValue.length;\n    }\n\n    let shiftSelection = 0;\n    let insertChars = '';\n    const isCursorInDecimals = decimalIndex < selectionEnd;\n    const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\n\n    if (selectionEnd === selectionStart) {\n      if (keyCode == 8) {\n        if (selectionStart <= prefix.length) {\n          return;\n        }\n\n        selectionStart--; // If previous char isn't a number, go back one more.\n\n        if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n          selectionStart--;\n        } // In natural mode, jump backwards when in decimal portion of number.\n\n\n        if (inputMode === CurrencyMaskInputMode.NATURAL && isCursorInDecimals) {\n          shiftSelection = -1; // when removing a single whole number, replace it with 0\n\n          if (isCursorImmediatelyAfterDecimalPoint && this.value < 10 && this.value > -10) {\n            insertChars += '0';\n          }\n        }\n      } else if (keyCode == 46 || keyCode == 63272) {\n        if (selectionStart === suffixStart) {\n          return;\n        }\n\n        selectionEnd++; // If next char isn't a number, go one more.\n\n        if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n          selectionStart++;\n          selectionEnd++;\n        }\n      }\n    } // In natural mode, replace decimals with 0s.\n\n\n    if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {\n      const replacedDecimalCount = selectionEnd - selectionStart;\n\n      for (let i = 0; i < replacedDecimalCount; i++) {\n        insertChars += '0';\n      }\n    }\n\n    let selectionFromEnd = this.rawValue.length - selectionEnd;\n    this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd); // Remove leading thousand separator from raw value.\n\n    const startChar = this.rawValue.substr(prefix.length, 1);\n\n    if (startChar === thousands) {\n      this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\n      selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\n    }\n\n    this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\n  }\n\n  updateFieldValue(selectionStart, disablePadAndTrim = false) {\n    let newRawValue = this.applyMask(false, this.rawValue || \"\", disablePadAndTrim);\n    selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n    selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));\n    this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n  }\n\n  updateOptions(options) {\n    let value = this.value;\n    this.options = options;\n    this.value = value;\n  }\n\n  prefixLength() {\n    return this.options.prefix.length;\n  }\n\n  suffixLength() {\n    return this.options.suffix.length;\n  }\n\n  isNullable() {\n    return this.options.nullable;\n  }\n\n  get canInputMoreNumbers() {\n    return this.inputManager.canInputMoreNumbers;\n  }\n\n  get inputSelection() {\n    return this.inputManager.inputSelection;\n  }\n\n  get rawValue() {\n    return this.inputManager.rawValue;\n  }\n\n  set rawValue(value) {\n    this.inputManager.rawValue = value;\n  }\n\n  get storedRawValue() {\n    return this.inputManager.storedRawValue;\n  }\n\n  get value() {\n    return this.clearMask(this.rawValue);\n  }\n\n  set value(value) {\n    this.rawValue = this.applyMask(true, \"\" + value);\n  }\n\n  isNullOrUndefined(value) {\n    return value === null || value === undefined;\n  }\n\n}\n\nclass InputHandler {\n  constructor(htmlInputElement, options) {\n    this.inputService = new InputService(htmlInputElement, options);\n  }\n\n  handleCut(event) {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 0);\n  }\n\n  handleInput(event) {\n    let selectionStart = this.inputService.inputSelection.selectionStart;\n    let keyCode = this.inputService.rawValue.charCodeAt(selectionStart - 1);\n    let rawValueLength = this.inputService.rawValue.length;\n    let storedRawValueLength = this.inputService.storedRawValue.length;\n\n    if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\n      this.inputService.updateFieldValue(selectionStart);\n      this.onModelChange(this.inputService.value);\n      return;\n    } // Restore the old value.\n\n\n    this.inputService.rawValue = this.inputService.storedRawValue;\n\n    if (rawValueLength < storedRawValueLength) {\n      // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\n      // input event, so we need to wrap this in a timeout.\n      this.timer(() => {\n        // Move the cursor to just after the deleted value.\n        this.inputService.updateFieldValue(selectionStart + 1); // Then backspace it.\n\n        this.inputService.removeNumber(8);\n        this.onModelChange(this.inputService.value);\n      }, 0);\n    }\n\n    if (rawValueLength > storedRawValueLength) {\n      // Move the cursor to just before the new value.\n      this.inputService.updateFieldValue(selectionStart - 1); // Process the character like a keypress.\n\n      this.handleKeypressImpl(keyCode);\n    }\n  }\n\n  handleKeydown(event) {\n    let keyCode = event.which || event.charCode || event.keyCode;\n\n    if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n      event.preventDefault();\n\n      if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() && this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {\n        this.clearValue();\n      } else {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n    }\n  }\n\n  clearValue() {\n    this.setValue(this.inputService.isNullable() ? null : 0);\n    this.onModelChange(this.inputService.value);\n  }\n\n  handleKeypress(event) {\n    let keyCode = event.which || event.charCode || event.keyCode;\n    event.preventDefault();\n\n    if (keyCode === 97 && event.ctrlKey) {\n      return;\n    }\n\n    this.handleKeypressImpl(keyCode);\n  }\n\n  handleKeypressImpl(keyCode) {\n    switch (keyCode) {\n      case undefined:\n      case 9:\n      case 13:\n        return;\n\n      case 43:\n        this.inputService.changeToPositive();\n        break;\n\n      case 45:\n        this.inputService.changeToNegative();\n        break;\n\n      default:\n        if (this.inputService.canInputMoreNumbers) {\n          let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n\n          if (selectionRangeLength == this.inputService.rawValue.length) {\n            this.setValue(null);\n          }\n\n          this.inputService.addNumber(keyCode);\n        }\n\n        break;\n    }\n\n    this.onModelChange(this.inputService.value);\n  }\n\n  handlePaste(event) {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 1);\n  }\n\n  updateOptions(options) {\n    this.inputService.updateOptions(options);\n  }\n\n  getOnModelChange() {\n    return this.onModelChange;\n  }\n\n  setOnModelChange(callbackFunction) {\n    this.onModelChange = callbackFunction;\n  }\n\n  getOnModelTouched() {\n    return this.onModelTouched;\n  }\n\n  setOnModelTouched(callbackFunction) {\n    this.onModelTouched = callbackFunction;\n  }\n\n  setValue(value) {\n    this.inputService.value = value;\n  }\n  /**\n   * Passthrough to setTimeout that can be stubbed out in tests.\n   */\n\n\n  timer(callback, delayMillis) {\n    setTimeout(callback, delayMillis);\n  }\n\n}\n\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CurrencyMaskDirective),\n  multi: true\n};\n\nclass CurrencyMaskDirective {\n  constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n    this.currencyMaskConfig = currencyMaskConfig;\n    this.elementRef = elementRef;\n    this.keyValueDiffers = keyValueDiffers;\n    this.options = {};\n    this.optionsTemplate = {\n      align: \"right\",\n      allowNegative: true,\n      allowZero: true,\n      decimal: \".\",\n      precision: 2,\n      prefix: \"$ \",\n      suffix: \"\",\n      thousands: \",\",\n      nullable: false,\n      inputMode: CurrencyMaskInputMode.FINANCIAL\n    };\n\n    if (currencyMaskConfig) {\n      this.optionsTemplate = currencyMaskConfig;\n    }\n\n    this.keyValueDiffer = keyValueDiffers.find({}).create();\n  }\n\n  ngAfterViewInit() {\n    this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;\n  }\n\n  ngDoCheck() {\n    if (this.keyValueDiffer.diff(this.options)) {\n      this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n      this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n    }\n  }\n\n  ngOnInit() {\n    this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n  }\n\n  handleBlur(event) {\n    this.inputHandler.getOnModelTouched().apply(event);\n  }\n\n  handleCut(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleCut(event);\n    }\n  }\n\n  handleInput(event) {\n    if (this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleInput(event);\n    }\n  }\n\n  handleKeydown(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleKeydown(event);\n    }\n  }\n\n  handleKeypress(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleKeypress(event);\n    }\n  }\n\n  handlePaste(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handlePaste(event);\n    }\n  }\n\n  handleDrop(event) {\n    if (!this.isChromeAndroid()) {\n      event.preventDefault();\n    }\n  }\n\n  isChromeAndroid() {\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n  }\n\n  isReadOnly() {\n    return this.elementRef.nativeElement.hasAttribute('readonly');\n  }\n\n  registerOnChange(callbackFunction) {\n    this.inputHandler.setOnModelChange(callbackFunction);\n  }\n\n  registerOnTouched(callbackFunction) {\n    this.inputHandler.setOnModelTouched(callbackFunction);\n  }\n\n  setDisabledState(value) {\n    this.elementRef.nativeElement.disabled = value;\n  }\n\n  writeValue(value) {\n    this.inputHandler.setValue(value);\n  }\n\n}\n\nCurrencyMaskDirective.Éµfac = function CurrencyMaskDirective_Factory(t) {\n  return new (t || CurrencyMaskDirective)(Éµngcc0.ÉµÉµdirectiveInject(CURRENCY_MASK_CONFIG, 8), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.KeyValueDiffers));\n};\n\nCurrencyMaskDirective.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n  type: CurrencyMaskDirective,\n  selectors: [[\"\", \"currencyMask\", \"\"]],\n  hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) {\n        return ctx.handleBlur($event);\n      })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) {\n        return ctx.handleCut($event);\n      })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) {\n        return ctx.handleInput($event);\n      })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.handleKeydown($event);\n      })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) {\n        return ctx.handleKeypress($event);\n      })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) {\n        return ctx.handlePaste($event);\n      })(\"drop\", function CurrencyMaskDirective_drop_HostBindingHandler($event) {\n        return ctx.handleDrop($event);\n      });\n    }\n  },\n  inputs: {\n    options: \"options\"\n  },\n  features: [Éµngcc0.ÉµÉµProvidersFeature([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR])]\n});\n\nCurrencyMaskDirective.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [CURRENCY_MASK_CONFIG]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: KeyValueDiffers\n}];\n\nCurrencyMaskDirective.propDecorators = {\n  options: [{\n    type: Input\n  }],\n  handleBlur: [{\n    type: HostListener,\n    args: [\"blur\", [\"$event\"]]\n  }],\n  handleCut: [{\n    type: HostListener,\n    args: [\"cut\", [\"$event\"]]\n  }],\n  handleInput: [{\n    type: HostListener,\n    args: [\"input\", [\"$event\"]]\n  }],\n  handleKeydown: [{\n    type: HostListener,\n    args: [\"keydown\", [\"$event\"]]\n  }],\n  handleKeypress: [{\n    type: HostListener,\n    args: [\"keypress\", [\"$event\"]]\n  }],\n  handlePaste: [{\n    type: HostListener,\n    args: [\"paste\", [\"$event\"]]\n  }],\n  handleDrop: [{\n    type: HostListener,\n    args: [\"drop\", [\"$event\"]]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CurrencyMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[currencyMask]\",\n      providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CURRENCY_MASK_CONFIG]\n      }]\n    }, {\n      type: Éµngcc0.ElementRef\n    }, {\n      type: Éµngcc0.KeyValueDiffers\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    handleBlur: [{\n      type: HostListener,\n      args: [\"blur\", [\"$event\"]]\n    }],\n    handleCut: [{\n      type: HostListener,\n      args: [\"cut\", [\"$event\"]]\n    }],\n    handleInput: [{\n      type: HostListener,\n      args: [\"input\", [\"$event\"]]\n    }],\n    handleKeydown: [{\n      type: HostListener,\n      args: [\"keydown\", [\"$event\"]]\n    }],\n    handleKeypress: [{\n      type: HostListener,\n      args: [\"keypress\", [\"$event\"]]\n    }],\n    handlePaste: [{\n      type: HostListener,\n      args: [\"paste\", [\"$event\"]]\n    }],\n    handleDrop: [{\n      type: HostListener,\n      args: [\"drop\", [\"$event\"]]\n    }]\n  });\n})();\n\nclass NgxCurrencyModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxCurrencyModule,\n      providers: [{\n        provide: CURRENCY_MASK_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nNgxCurrencyModule.Éµfac = function NgxCurrencyModule_Factory(t) {\n  return new (t || NgxCurrencyModule)();\n};\n\nNgxCurrencyModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n  type: NgxCurrencyModule\n});\nNgxCurrencyModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n  imports: [CommonModule, FormsModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NgxCurrencyModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule],\n      declarations: [CurrencyMaskDirective],\n      exports: [CurrencyMaskDirective]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxCurrencyModule, {\n    declarations: function () {\n      return [CurrencyMaskDirective];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [CurrencyMaskDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskInputMode, NgxCurrencyModule };","map":{"version":3,"names":["InjectionToken","forwardRef","Directive","Optional","Inject","ElementRef","KeyValueDiffers","Input","HostListener","NgModule","NG_VALUE_ACCESSOR","FormsModule","CommonModule","Éµngcc0","CurrencyMaskInputMode","CURRENCY_MASK_CONFIG","InputManager","constructor","htmlInputElement","setCursorAt","position","setSelectionRange","focus","createTextRange","textRange","collapse","moveEnd","moveStart","select","updateValueAndCursor","newRawValue","oldLength","selectionStart","rawValue","newLength","length","canInputMoreNumbers","onlyNumbers","replace","haventReachedMaxLength","maxLength","inputSelection","selectionEnd","haveNumberSelected","value","substring","match","startWithZero","range","document","selection","createRange","parentElement","lenght","normalizedValue","startRange","moveToBookmark","getBookmark","endRange","compareEndPoints","slice","split","_storedRawValue","storedRawValue","InputService","options","SINGLE_DIGIT_REGEX","RegExp","ONLY_NUMBERS_REGEX","PER_AR_NUMBER","Map","inputManager","initialize","set","addNumber","keyCode","decimal","precision","inputMode","keyChar","String","fromCharCode","isDecimalChar","applyMask","undefined","NATURAL","indexOf","updateFieldValue","rawValueStart","rawValueEnd","inDecimalPortion","newValue","nextSelectionStart","isDecimalOrThousands","thousands","test","isNumber","disablePadAndTrim","allowNegative","prefix","suffix","min","max","Number","toFixed","padOrTrimPrecision","integerPart","integerValue","parseInt","startsWith","decimalPart","decimalValue","isNegative","isNullOrUndefined","Math","divideBy","padEnd","repeat","operator","decimalIndex","lastIndexOf","decimalPortion","actualPrecision","i","clearMask","isNullable","forEach","val","key","re","parseFloat","changeToNegative","charAt","changeToPositive","removeNumber","suffixStart","shiftSelection","insertChars","isCursorInDecimals","isCursorImmediatelyAfterDecimalPoint","substr","replacedDecimalCount","selectionFromEnd","startChar","updateOptions","prefixLength","suffixLength","nullable","InputHandler","inputService","handleCut","event","setTimeout","setValue","onModelChange","handleInput","charCodeAt","rawValueLength","storedRawValueLength","abs","timer","handleKeypressImpl","handleKeydown","which","charCode","preventDefault","clearValue","handleKeypress","ctrlKey","selectionRangeLength","handlePaste","getOnModelChange","setOnModelChange","callbackFunction","getOnModelTouched","onModelTouched","setOnModelTouched","callback","delayMillis","CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR","provide","useExisting","CurrencyMaskDirective","multi","currencyMaskConfig","elementRef","keyValueDiffers","optionsTemplate","align","allowZero","FINANCIAL","keyValueDiffer","find","create","ngAfterViewInit","nativeElement","style","textAlign","ngDoCheck","diff","inputHandler","Object","assign","ngOnInit","handleBlur","apply","isChromeAndroid","isReadOnly","handleDrop","navigator","userAgent","hasAttribute","registerOnChange","registerOnTouched","setDisabledState","disabled","writeValue","Éµfac","CurrencyMaskDirective_Factory","t","ÉµÉµdirectiveInject","Éµdir","ÉµÉµdefineDirective","type","selectors","hostBindings","CurrencyMaskDirective_HostBindings","rf","ctx","ÉµÉµlistener","CurrencyMaskDirective_blur_HostBindingHandler","$event","CurrencyMaskDirective_cut_HostBindingHandler","CurrencyMaskDirective_input_HostBindingHandler","CurrencyMaskDirective_keydown_HostBindingHandler","CurrencyMaskDirective_keypress_HostBindingHandler","CurrencyMaskDirective_paste_HostBindingHandler","CurrencyMaskDirective_drop_HostBindingHandler","inputs","features","ÉµÉµProvidersFeature","ctorParameters","decorators","args","propDecorators","ngDevMode","ÉµsetClassMetadata","selector","providers","NgxCurrencyModule","forRoot","config","ngModule","useValue","NgxCurrencyModule_Factory","Éµmod","ÉµÉµdefineNgModule","Éµinj","ÉµÉµdefineInjector","imports","declarations","exports","ngJitMode","ÉµÉµsetNgModuleScope"],"sources":["C:/Dev/Cursos/ProEventos/Front/ProEventos-App/node_modules/ngx-currency/__ivy_ngcc__/fesm2015/ngx-currency.js"],"sourcesContent":["import { InjectionToken, forwardRef, Directive, Optional, Inject, ElementRef, KeyValueDiffers, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport * as Éµngcc0 from '@angular/core';\nvar CurrencyMaskInputMode;\n(function (CurrencyMaskInputMode) {\n    CurrencyMaskInputMode[CurrencyMaskInputMode[\"FINANCIAL\"] = 0] = \"FINANCIAL\";\n    CurrencyMaskInputMode[CurrencyMaskInputMode[\"NATURAL\"] = 1] = \"NATURAL\";\n})(CurrencyMaskInputMode || (CurrencyMaskInputMode = {}));\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nclass InputManager {\n    constructor(htmlInputElement) {\n        this.htmlInputElement = htmlInputElement;\n    }\n    setCursorAt(position) {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        }\n        else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n    updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n    get canInputMoreNumbers() {\n        let onlyNumbers = this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, \"\");\n        let haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected = !!(selectionStart != selectionEnd &&\n            this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n    get inputSelection() {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        }\n        else {\n            let range = document.selection.createRange();\n            if (range && range.parentElement() == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                startRange.moveToBookmark(range.getBookmark());\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                }\n                else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    }\n                    else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd\n        };\n    }\n    get rawValue() {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n    set rawValue(value) {\n        this._storedRawValue = value;\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n    get storedRawValue() {\n        return this._storedRawValue || '';\n    }\n}\n\nclass InputService {\n    constructor(htmlInputElement, options) {\n        this.htmlInputElement = htmlInputElement;\n        this.options = options;\n        this.SINGLE_DIGIT_REGEX = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\n        this.ONLY_NUMBERS_REGEX = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\n        this.PER_AR_NUMBER = new Map();\n        this.inputManager = new InputManager(htmlInputElement);\n        this.initialize();\n    }\n    initialize() {\n        this.PER_AR_NUMBER.set(\"\\u06F0\", \"0\");\n        this.PER_AR_NUMBER.set(\"\\u06F1\", \"1\");\n        this.PER_AR_NUMBER.set(\"\\u06F2\", \"2\");\n        this.PER_AR_NUMBER.set(\"\\u06F3\", \"3\");\n        this.PER_AR_NUMBER.set(\"\\u06F4\", \"4\");\n        this.PER_AR_NUMBER.set(\"\\u06F5\", \"5\");\n        this.PER_AR_NUMBER.set(\"\\u06F6\", \"6\");\n        this.PER_AR_NUMBER.set(\"\\u06F7\", \"7\");\n        this.PER_AR_NUMBER.set(\"\\u06F8\", \"8\");\n        this.PER_AR_NUMBER.set(\"\\u06F9\", \"9\");\n        this.PER_AR_NUMBER.set(\"\\u0660\", \"0\");\n        this.PER_AR_NUMBER.set(\"\\u0661\", \"1\");\n        this.PER_AR_NUMBER.set(\"\\u0662\", \"2\");\n        this.PER_AR_NUMBER.set(\"\\u0663\", \"3\");\n        this.PER_AR_NUMBER.set(\"\\u0664\", \"4\");\n        this.PER_AR_NUMBER.set(\"\\u0665\", \"5\");\n        this.PER_AR_NUMBER.set(\"\\u0666\", \"6\");\n        this.PER_AR_NUMBER.set(\"\\u0667\", \"7\");\n        this.PER_AR_NUMBER.set(\"\\u0668\", \"8\");\n        this.PER_AR_NUMBER.set(\"\\u0669\", \"9\");\n    }\n    addNumber(keyCode) {\n        const { decimal, precision, inputMode } = this.options;\n        let keyChar = String.fromCharCode(keyCode);\n        const isDecimalChar = keyChar === this.options.decimal;\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, keyChar);\n            let selectionStart = undefined;\n            if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {\n                selectionStart = this.rawValue.indexOf(decimal);\n                if (isDecimalChar) {\n                    selectionStart++;\n                }\n            }\n            this.updateFieldValue(selectionStart);\n        }\n        else {\n            let selectionStart = this.inputSelection.selectionStart;\n            let selectionEnd = this.inputSelection.selectionEnd;\n            const rawValueStart = this.rawValue.substring(0, selectionStart);\n            let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);\n            // In natural mode, replace decimals instead of shifting them.\n            const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n            if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && selectionStart === selectionEnd) {\n                rawValueEnd = rawValueEnd.substring(1);\n            }\n            const newValue = rawValueStart + keyChar + rawValueEnd;\n            let nextSelectionStart = selectionStart + 1;\n            const isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;\n            if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n                // If the cursor is just before the decimal or thousands separator and the user types the\n                // decimal or thousands separator, move the cursor past it.\n                nextSelectionStart++;\n            }\n            else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {\n                // Ignore other non-numbers.\n                return;\n            }\n            this.rawValue = newValue;\n            this.updateFieldValue(nextSelectionStart);\n        }\n    }\n    applyMask(isNumber, rawValue, disablePadAndTrim = false) {\n        let { allowNegative, decimal, precision, prefix, suffix, thousands, min, max, inputMode } = this.options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n        if (!onlyNumbers && rawValue !== decimal) {\n            return \"\";\n        }\n        if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {\n            rawValue = this.padOrTrimPrecision(rawValue);\n            onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n        }\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision)\n            .replace(/^\\u0660*/g, \"\")\n            .replace(/^\\u06F0*/g, \"\")\n            .replace(/^0*/g, \"\");\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n        let integerValue = parseInt(integerPart);\n        integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\n        if (thousands && integerPart.startsWith(thousands)) {\n            integerPart = integerPart.substring(1);\n        }\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n        let decimalValue = parseInt(decimalPart) || 0;\n        let isNegative = rawValue.indexOf(\"-\") > -1;\n        // Ensure max is at least as large as min.\n        max = (this.isNullOrUndefined(max) || this.isNullOrUndefined(min)) ? max : Math.max(max, min);\n        // Ensure precision number works well with more than 2 digits\n        // 23 / 100... 233 / 1000 and so on\n        const divideBy = Number('1'.padEnd(precision + 1, '0'));\n        // Restrict to the min and max values.\n        let newValue = integerValue + (decimalValue / divideBy);\n        newValue = isNegative ? -newValue : newValue;\n        if (!this.isNullOrUndefined(max) && newValue > max) {\n            return this.applyMask(true, max + '');\n        }\n        else if (!this.isNullOrUndefined(min) && newValue < min) {\n            return this.applyMask(true, min + '');\n        }\n        if (precision > 0) {\n            if (newRawValue == \"0\" && decimalPart.length < precision) {\n                newRawValue += decimal + \"0\".repeat(precision - 1) + decimalPart;\n            }\n            else {\n                newRawValue += decimal + decimalPart;\n            }\n        }\n        // let isZero = newValue == 0;\n        let operator = (isNegative && allowNegative /*&& !isZero */) ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n    padOrTrimPrecision(rawValue) {\n        let { decimal, precision } = this.options;\n        let decimalIndex = rawValue.lastIndexOf(decimal);\n        if (decimalIndex === -1) {\n            decimalIndex = rawValue.length;\n            rawValue += decimal;\n        }\n        let decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, \"\");\n        const actualPrecision = decimalPortion.length;\n        if (actualPrecision < precision) {\n            for (let i = actualPrecision; i < precision; i++) {\n                decimalPortion += '0';\n            }\n        }\n        else if (actualPrecision > precision) {\n            decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\n        }\n        return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n    }\n    clearMask(rawValue) {\n        if (this.isNullable() && rawValue === \"\")\n            return null;\n        let value = (rawValue || \"0\").replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n        this.PER_AR_NUMBER.forEach((val, key) => {\n            const re = new RegExp(key, \"g\");\n            value = value.replace(re, val);\n        });\n        return parseFloat(value);\n    }\n    changeToNegative() {\n        if (this.options.allowNegative /*&& this.rawValue != \"\"*/ && this.rawValue.charAt(0) != \"-\" /*&& this.value != 0*/) {\n            // Apply the mask to ensure the min and max values are enforced.\n            this.rawValue = this.applyMask(false, \"-\" + (this.rawValue ? this.rawValue : '0'));\n        }\n    }\n    changeToPositive() {\n        // Apply the mask to ensure the min and max values are enforced.\n        this.rawValue = this.applyMask(false, this.rawValue.replace(\"-\", \"\"));\n    }\n    removeNumber(keyCode) {\n        let { decimal, thousands, prefix, suffix, inputMode } = this.options;\n        if (this.isNullable() && this.value == 0) {\n            this.rawValue = null;\n            return;\n        }\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n        const suffixStart = this.rawValue.length - suffix.length;\n        selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n        selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));\n        // Check if selection was entirely in the prefix or suffix.\n        if (selectionStart === selectionEnd &&\n            this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\n            this.updateFieldValue(selectionStart);\n            return;\n        }\n        let decimalIndex = this.rawValue.indexOf(decimal);\n        if (decimalIndex === -1) {\n            decimalIndex = this.rawValue.length;\n        }\n        let shiftSelection = 0;\n        let insertChars = '';\n        const isCursorInDecimals = decimalIndex < selectionEnd;\n        const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\n        if (selectionEnd === selectionStart) {\n            if (keyCode == 8) {\n                if (selectionStart <= prefix.length) {\n                    return;\n                }\n                selectionStart--;\n                // If previous char isn't a number, go back one more.\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n                    selectionStart--;\n                }\n                // In natural mode, jump backwards when in decimal portion of number.\n                if (inputMode === CurrencyMaskInputMode.NATURAL && isCursorInDecimals) {\n                    shiftSelection = -1;\n                    // when removing a single whole number, replace it with 0\n                    if (isCursorImmediatelyAfterDecimalPoint && this.value < 10 && this.value > -10) {\n                        insertChars += '0';\n                    }\n                }\n            }\n            else if (keyCode == 46 || keyCode == 63272) {\n                if (selectionStart === suffixStart) {\n                    return;\n                }\n                selectionEnd++;\n                // If next char isn't a number, go one more.\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n                    selectionStart++;\n                    selectionEnd++;\n                }\n            }\n        }\n        // In natural mode, replace decimals with 0s.\n        if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {\n            const replacedDecimalCount = selectionEnd - selectionStart;\n            for (let i = 0; i < replacedDecimalCount; i++) {\n                insertChars += '0';\n            }\n        }\n        let selectionFromEnd = this.rawValue.length - selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd);\n        // Remove leading thousand separator from raw value.\n        const startChar = this.rawValue.substr(prefix.length, 1);\n        if (startChar === thousands) {\n            this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\n            selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\n        }\n        this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\n    }\n    updateFieldValue(selectionStart, disablePadAndTrim = false) {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\", disablePadAndTrim);\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n    updateOptions(options) {\n        let value = this.value;\n        this.options = options;\n        this.value = value;\n    }\n    prefixLength() {\n        return this.options.prefix.length;\n    }\n    suffixLength() {\n        return this.options.suffix.length;\n    }\n    isNullable() {\n        return this.options.nullable;\n    }\n    get canInputMoreNumbers() {\n        return this.inputManager.canInputMoreNumbers;\n    }\n    get inputSelection() {\n        return this.inputManager.inputSelection;\n    }\n    get rawValue() {\n        return this.inputManager.rawValue;\n    }\n    set rawValue(value) {\n        this.inputManager.rawValue = value;\n    }\n    get storedRawValue() {\n        return this.inputManager.storedRawValue;\n    }\n    get value() {\n        return this.clearMask(this.rawValue);\n    }\n    set value(value) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n    isNullOrUndefined(value) {\n        return value === null || value === undefined;\n    }\n}\n\nclass InputHandler {\n    constructor(htmlInputElement, options) {\n        this.inputService = new InputService(htmlInputElement, options);\n    }\n    handleCut(event) {\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n    handleInput(event) {\n        let selectionStart = this.inputService.inputSelection.selectionStart;\n        let keyCode = this.inputService.rawValue.charCodeAt(selectionStart - 1);\n        let rawValueLength = this.inputService.rawValue.length;\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\n            this.inputService.updateFieldValue(selectionStart);\n            this.onModelChange(this.inputService.value);\n            return;\n        }\n        // Restore the old value.\n        this.inputService.rawValue = this.inputService.storedRawValue;\n        if (rawValueLength < storedRawValueLength) {\n            // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\n            // input event, so we need to wrap this in a timeout.\n            this.timer(() => {\n                // Move the cursor to just after the deleted value.\n                this.inputService.updateFieldValue(selectionStart + 1);\n                // Then backspace it.\n                this.inputService.removeNumber(8);\n                this.onModelChange(this.inputService.value);\n            }, 0);\n        }\n        if (rawValueLength > storedRawValueLength) {\n            // Move the cursor to just before the new value.\n            this.inputService.updateFieldValue(selectionStart - 1);\n            // Process the character like a keypress.\n            this.handleKeypressImpl(keyCode);\n        }\n    }\n    handleKeydown(event) {\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() &&\n                this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {\n                this.clearValue();\n            }\n            else {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n    clearValue() {\n        this.setValue(this.inputService.isNullable() ? null : 0);\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeypress(event) {\n        let keyCode = event.which || event.charCode || event.keyCode;\n        event.preventDefault();\n        if (keyCode === 97 && event.ctrlKey) {\n            return;\n        }\n        this.handleKeypressImpl(keyCode);\n    }\n    handleKeypressImpl(keyCode) {\n        switch (keyCode) {\n            case undefined:\n            case 9:\n            case 13:\n                return;\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers) {\n                    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n                    if (selectionRangeLength == this.inputService.rawValue.length) {\n                        this.setValue(null);\n                    }\n                    this.inputService.addNumber(keyCode);\n                }\n                break;\n        }\n        this.onModelChange(this.inputService.value);\n    }\n    handlePaste(event) {\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n    updateOptions(options) {\n        this.inputService.updateOptions(options);\n    }\n    getOnModelChange() {\n        return this.onModelChange;\n    }\n    setOnModelChange(callbackFunction) {\n        this.onModelChange = callbackFunction;\n    }\n    getOnModelTouched() {\n        return this.onModelTouched;\n    }\n    setOnModelTouched(callbackFunction) {\n        this.onModelTouched = callbackFunction;\n    }\n    setValue(value) {\n        this.inputService.value = value;\n    }\n    /**\n     * Passthrough to setTimeout that can be stubbed out in tests.\n     */\n    timer(callback, delayMillis) {\n        setTimeout(callback, delayMillis);\n    }\n}\n\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyMaskDirective),\n    multi: true,\n};\nclass CurrencyMaskDirective {\n    constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n        this.currencyMaskConfig = currencyMaskConfig;\n        this.elementRef = elementRef;\n        this.keyValueDiffers = keyValueDiffers;\n        this.options = {};\n        this.optionsTemplate = {\n            align: \"right\",\n            allowNegative: true,\n            allowZero: true,\n            decimal: \".\",\n            precision: 2,\n            prefix: \"$ \",\n            suffix: \"\",\n            thousands: \",\",\n            nullable: false,\n            inputMode: CurrencyMaskInputMode.FINANCIAL\n        };\n        if (currencyMaskConfig) {\n            this.optionsTemplate = currencyMaskConfig;\n        }\n        this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n    ngAfterViewInit() {\n        this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n    ngDoCheck() {\n        if (this.keyValueDiffer.diff(this.options)) {\n            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n            this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n        }\n    }\n    ngOnInit() {\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n    }\n    handleBlur(event) {\n        this.inputHandler.getOnModelTouched().apply(event);\n    }\n    handleCut(event) {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this.inputHandler.handleCut(event);\n        }\n    }\n    handleInput(event) {\n        if (this.isChromeAndroid()) {\n            !this.isReadOnly() && this.inputHandler.handleInput(event);\n        }\n    }\n    handleKeydown(event) {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this.inputHandler.handleKeydown(event);\n        }\n    }\n    handleKeypress(event) {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this.inputHandler.handleKeypress(event);\n        }\n    }\n    handlePaste(event) {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this.inputHandler.handlePaste(event);\n        }\n    }\n    handleDrop(event) {\n        if (!this.isChromeAndroid()) {\n            event.preventDefault();\n        }\n    }\n    isChromeAndroid() {\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n    isReadOnly() {\n        return this.elementRef.nativeElement.hasAttribute('readonly');\n    }\n    registerOnChange(callbackFunction) {\n        this.inputHandler.setOnModelChange(callbackFunction);\n    }\n    registerOnTouched(callbackFunction) {\n        this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n    setDisabledState(value) {\n        this.elementRef.nativeElement.disabled = value;\n    }\n    writeValue(value) {\n        this.inputHandler.setValue(value);\n    }\n}\nCurrencyMaskDirective.Éµfac = function CurrencyMaskDirective_Factory(t) { return new (t || CurrencyMaskDirective)(Éµngcc0.ÉµÉµdirectiveInject(CURRENCY_MASK_CONFIG, 8), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.KeyValueDiffers)); };\nCurrencyMaskDirective.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: CurrencyMaskDirective, selectors: [[\"\", \"currencyMask\", \"\"]], hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        Éµngcc0.ÉµÉµlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) { return ctx.handleBlur($event); })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) { return ctx.handleCut($event); })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) { return ctx.handleInput($event); })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) { return ctx.handleKeydown($event); })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) { return ctx.handleKeypress($event); })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) { return ctx.handlePaste($event); })(\"drop\", function CurrencyMaskDirective_drop_HostBindingHandler($event) { return ctx.handleDrop($event); });\n    } }, inputs: { options: \"options\" }, features: [Éµngcc0.ÉµÉµProvidersFeature([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR])] });\nCurrencyMaskDirective.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CURRENCY_MASK_CONFIG,] }] },\n    { type: ElementRef },\n    { type: KeyValueDiffers }\n];\nCurrencyMaskDirective.propDecorators = {\n    options: [{ type: Input }],\n    handleBlur: [{ type: HostListener, args: [\"blur\", [\"$event\"],] }],\n    handleCut: [{ type: HostListener, args: [\"cut\", [\"$event\"],] }],\n    handleInput: [{ type: HostListener, args: [\"input\", [\"$event\"],] }],\n    handleKeydown: [{ type: HostListener, args: [\"keydown\", [\"$event\"],] }],\n    handleKeypress: [{ type: HostListener, args: [\"keypress\", [\"$event\"],] }],\n    handlePaste: [{ type: HostListener, args: [\"paste\", [\"$event\"],] }],\n    handleDrop: [{ type: HostListener, args: [\"drop\", [\"$event\"],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CurrencyMaskDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"[currencyMask]\",\n                providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CURRENCY_MASK_CONFIG]\n            }] }, { type: Éµngcc0.ElementRef }, { type: Éµngcc0.KeyValueDiffers }]; }, { options: [{\n            type: Input\n        }], handleBlur: [{\n            type: HostListener,\n            args: [\"blur\", [\"$event\"]]\n        }], handleCut: [{\n            type: HostListener,\n            args: [\"cut\", [\"$event\"]]\n        }], handleInput: [{\n            type: HostListener,\n            args: [\"input\", [\"$event\"]]\n        }], handleKeydown: [{\n            type: HostListener,\n            args: [\"keydown\", [\"$event\"]]\n        }], handleKeypress: [{\n            type: HostListener,\n            args: [\"keypress\", [\"$event\"]]\n        }], handlePaste: [{\n            type: HostListener,\n            args: [\"paste\", [\"$event\"]]\n        }], handleDrop: [{\n            type: HostListener,\n            args: [\"drop\", [\"$event\"]]\n        }] }); })();\n\nclass NgxCurrencyModule {\n    static forRoot(config) {\n        return {\n            ngModule: NgxCurrencyModule,\n            providers: [{\n                    provide: CURRENCY_MASK_CONFIG,\n                    useValue: config,\n                }]\n        };\n    }\n}\nNgxCurrencyModule.Éµfac = function NgxCurrencyModule_Factory(t) { return new (t || NgxCurrencyModule)(); };\nNgxCurrencyModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: NgxCurrencyModule });\nNgxCurrencyModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({ imports: [CommonModule, FormsModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NgxCurrencyModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, FormsModule],\n                declarations: [CurrencyMaskDirective],\n                exports: [CurrencyMaskDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxCurrencyModule, { declarations: function () { return [CurrencyMaskDirective]; }, imports: function () { return [CommonModule, FormsModule]; }, exports: function () { return [CurrencyMaskDirective]; } }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskInputMode, NgxCurrencyModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}